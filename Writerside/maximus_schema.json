{"swagger": "2.0", "info": {"title": "Maximus API", "description": "# Introduction", "termsOfService": "https://docs.github.com/en/site-policy/github-terms/github-terms-of-service", "contact": {"email": "test@test.com"}, "license": {"name": "MIT License", "url": "https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt"}, "x-logo": {"url": "https://image.shutterstock.com/image-vector/no-image-vector-symbol-missing-260nw-1310632172.jpg", "backgroundColor": "#fafafa"}, "version": "v1"}, "host": "127.0.0.1:8000", "schemes": ["http"], "basePath": "/api/v1", "consumes": ["application/json"], "produces": ["application/json"], "securityDefinitions": {"Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}}, "security": [{"Bearer": []}], "paths": {"/Users/": {"get": {"operationId": "Users_list", "description": "", "parameters": [{"name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer"}, {"name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer"}], "responses": {"200": {"description": "", "schema": {"required": ["count", "results"], "type": "object", "properties": {"count": {"type": "integer"}, "next": {"type": "string", "format": "uri", "x-nullable": true}, "previous": {"type": "string", "format": "uri", "x-nullable": true}, "results": {"type": "array", "items": {"$ref": "#/definitions/User"}}}}}}, "consumes": ["multipart/form-data"], "tags": ["Users"]}, "parameters": []}, "/Users/{id}/": {"get": {"operationId": "Users_read", "description": "", "parameters": [], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/User"}}}, "consumes": ["multipart/form-data"], "tags": ["Users"]}, "put": {"operationId": "Users_update", "description": "", "parameters": [{"name": "name", "in": "formData", "required": true, "type": "string", "maxLength": 255, "minLength": 1}, {"name": "email", "in": "formData", "required": true, "type": "string", "format": "email", "maxLength": 254, "minLength": 1}, {"name": "account_type", "in": "formData", "required": false, "type": "string", "enum": ["general", "staff"]}, {"name": "organization", "in": "formData", "required": false, "type": "string", "format": "uuid", "x-nullable": true}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/User"}}}, "consumes": ["multipart/form-data"], "tags": ["Users"]}, "parameters": [{"name": "id", "in": "path", "description": "A unique integer value identifying this user.", "required": true, "type": "integer"}]}, "/accounts/login/": {"post": {"operationId": "User Login", "description": "\nUser Login is an API endpoint to allow users to\nlogin to the website. After succesful authentication, the caller\nis provided with a temporary token, using which the client can make\nauthenticated requests to the server, this token will also be responsible\nin managing authorization i.e., different kinds of users will be able to\nlogin and perform allowed actions which are decided based on the kind\nof account they have with the server.\n\nThe endpoint accepts a POST request with\n`email` and `password`\nand returns a token with user details after the credentials are verified by\nthe server\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Login"}}], "responses": {"200": {"description": "OK", "examples": {"application/json": {"key": "2e9d235fa499d7e52a5bffe9879897989", "user": {"id": 1, "name": "John Doe", "email": "user@example.com", "account_type": "general", "profile_pic": "some_name.jpg"}}}}, "400": {"description": "Error: Bad Request", "examples": {"application/json": {"non_field_errors": ["Unable to log in with provided credentials."]}}}}, "tags": ["Authentication"], "security": []}, "parameters": []}, "/accounts/logout/": {"post": {"operationId": "User Logout", "description": "\nUser Logout deletes the token generated for the current user object.\nCalling this endpoint will delete the token associated with the current\nuser from the db. The user is identified with the help of the token\nsupplied in the Authorization header.\n", "parameters": [], "responses": {"200": {"description": "OK", "examples": {"application/json": {"detail": "Successfully logged out."}}}, "401": {"description": "Unauthorized", "examples": {"application/json": {"detail": "Invalid token."}}}}, "tags": ["Authentication"], "x-code-samples": [{"lang": "bash", "source": "\n# User Logout endpoint\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer sjdhskjh3454343\" \\\n  -d '{\"profile_pic\": \"some_pic.jpg\"} \\\n  \"https://ohuru.tech//v1/\"\n"}]}, "parameters": []}, "/accounts/password/change/": {"post": {"operationId": "Password Set", "description": "\nThis endpoint is accesible to authenticated users and is used to set\na new password for a user provided the correct `old_password` is provided.\n\nThe endpoint accepts the `old_password`, `new_password1` and `new_password2`.\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CustomPasswordChange"}}], "responses": {"200": {"description": "OK", "examples": {"application/json": {"detail": "New password has been saved."}}}, "401": {"description": "UNAUTHORIZED", "examples": {"application/json": {"detail": "Invalid token"}}}}, "tags": ["Authentication"], "security": []}, "parameters": []}, "/accounts/password/reset/": {"post": {"operationId": "Password Reset", "description": "\nThe Password Reset endpoint is used to generate a link to allow users\nto reset their password.\nThe link generated utilizes the front-end base url you have updated in\nthe settings and\nconstructs a link of the following form:\n`<your_frontend_url>/<user_id>/<token>`, you are required to parse these\nvalues and make a call\nto `Password Reset Confirm` endpoint for updating the password for the user\n\nThe endpoint accepts  and `email`\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/PasswordReset"}}], "responses": {"200": {"description": "OK", "examples": {"application/json": {"detail": "Password reset e-mail has been sent"}}}, "400": {"description": "BAD REQUEST", "examples": {"application/json": {"detail": "The user with the given email does not exist"}}}}, "tags": ["Authentication"], "security": []}, "parameters": []}, "/accounts/password/reset/confirm/": {"post": {"operationId": "Password Reset Confirm", "description": "\nThe Password Reset Confirm endpoint expects you to pass in the token\nyou get after the user hits the link he gets in the email after initiating\na reset request. The endpoint accepts\n`new_password1`, `new_password2`, `uid` and `token`\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/CustomPasswordResetConfirm"}}], "responses": {"200": {"description": "OK", "examples": {"application/json": {"detail": "Password has been reset with the new password."}}}, "400": {"description": "BAD REQUEST", "examples": {"application/json": {"token": ["Invalid Value"]}}}}, "tags": ["Authentication"], "security": []}, "parameters": []}, "/accounts/registration/": {"post": {"operationId": "User Registration", "description": "\nUser Registration is an API endpoint to allow users to\nregister to the website.\n\nBy using this endpoint you make a POST call to register a user by\nproviding his `username`, `name`, `password1`, `password2` and `account_type`, the\n`password1` and `password2` fields need to be same\n", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/UserRegister"}}], "responses": {"201": {"description": "Created", "schema": {"$ref": "#/definitions/UserToken"}, "examples": {"application/json": {"key": "2e9d235fa499d7e52a5bffe9879897989", "user": {"id": 1, "name": "John Doe", "email": "user@example.com", "account_type": "general", "profile_pic": "some_name.jpg"}}}}, "400": {"description": "Error: Bad Request", "examples": {"application/json": {"email": ["A user is already registered with this e-mail address"], "password1": ["This password is too common."]}}}}, "tags": ["Users"], "security": [], "x-code-samples": [{"lang": "Bash", "source": "\n# Update the profile pic of a user\ncurl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \n      \"name\": \"Jon Doe\", \\\n      \"email\": \"jondoe@customer.com\", \\\n      \"password1\": \"some_password\", \\\n      \"password2\": \"some_password\", \\\n      \"account_type\": \"general\"\n    } \\\n  \"https://ohuru.tech//v1/\"\n"}]}, "parameters": []}, "/organizations/": {"get": {"operationId": "organizations_list", "description": "", "parameters": [{"name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer"}, {"name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer"}], "responses": {"200": {"description": "", "schema": {"required": ["count", "results"], "type": "object", "properties": {"count": {"type": "integer"}, "next": {"type": "string", "format": "uri", "x-nullable": true}, "previous": {"type": "string", "format": "uri", "x-nullable": true}, "results": {"type": "array", "items": {"$ref": "#/definitions/Maximus_Organization"}}}}}}, "tags": ["organizations"]}, "post": {"operationId": "organizations_create", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Maximus_Organization"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/Maximus_Organization"}}}, "tags": ["organizations"]}, "parameters": []}, "/organizations/{id}/": {"get": {"operationId": "organizations_read", "description": "", "parameters": [], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Maximus_Organization"}}}, "tags": ["organizations"]}, "put": {"operationId": "organizations_update", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Maximus_Organization"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Maximus_Organization"}}}, "tags": ["organizations"]}, "patch": {"operationId": "organizations_partial_update", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Maximus_Organization"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Maximus_Organization"}}}, "tags": ["organizations"]}, "delete": {"operationId": "organizations_delete", "description": "", "parameters": [], "responses": {"204": {"description": ""}}, "tags": ["organizations"]}, "parameters": [{"name": "id", "in": "path", "description": "A UUID string identifying this maximus organization.", "required": true, "type": "string", "format": "uuid"}]}, "/projects/": {"get": {"operationId": "projects_list", "description": "", "parameters": [{"name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer"}, {"name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer"}], "responses": {"200": {"description": "", "schema": {"required": ["count", "results"], "type": "object", "properties": {"count": {"type": "integer"}, "next": {"type": "string", "format": "uri", "x-nullable": true}, "previous": {"type": "string", "format": "uri", "x-nullable": true}, "results": {"type": "array", "items": {"$ref": "#/definitions/Maximus_Project"}}}}}}, "tags": ["projects"]}, "post": {"operationId": "projects_create", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Maximus_Project"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/Maximus_Project"}}}, "tags": ["projects"]}, "parameters": []}, "/projects/{id}/": {"get": {"operationId": "projects_read", "description": "", "parameters": [], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Maximus_Project"}}}, "tags": ["projects"]}, "put": {"operationId": "projects_update", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Maximus_Project"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Maximus_Project"}}}, "tags": ["projects"]}, "patch": {"operationId": "projects_partial_update", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/Maximus_Project"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/Maximus_Project"}}}, "tags": ["projects"]}, "delete": {"operationId": "projects_delete", "description": "", "parameters": [], "responses": {"204": {"description": ""}}, "tags": ["projects"]}, "parameters": [{"name": "id", "in": "path", "description": "A UUID string identifying this maximus project.", "required": true, "type": "string", "format": "uuid"}]}, "/teams/": {"get": {"operationId": "teams_list", "description": "", "parameters": [{"name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer"}, {"name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer"}], "responses": {"200": {"description": "", "schema": {"required": ["count", "results"], "type": "object", "properties": {"count": {"type": "integer"}, "next": {"type": "string", "format": "uri", "x-nullable": true}, "previous": {"type": "string", "format": "uri", "x-nullable": true}, "results": {"type": "array", "items": {"$ref": "#/definitions/MaximusTeam"}}}}}}, "tags": ["teams"]}, "post": {"operationId": "teams_create", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/MaximusTeam"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/MaximusTeam"}}}, "tags": ["teams"]}, "parameters": []}, "/teams/{id}/": {"get": {"operationId": "teams_read", "description": "", "parameters": [], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/MaximusTeam"}}}, "tags": ["teams"]}, "put": {"operationId": "teams_update", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/MaximusTeam"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/MaximusTeam"}}}, "tags": ["teams"]}, "patch": {"operationId": "teams_partial_update", "description": "", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/MaximusTeam"}}], "responses": {"200": {"description": "", "schema": {"$ref": "#/definitions/MaximusTeam"}}}, "tags": ["teams"]}, "delete": {"operationId": "teams_delete", "description": "", "parameters": [], "responses": {"204": {"description": ""}}, "tags": ["teams"]}, "parameters": [{"name": "id", "in": "path", "description": "A UUID string identifying this maximus team.", "required": true, "type": "string", "format": "uuid"}]}}, "definitions": {"User": {"required": ["name", "email"], "type": "object", "properties": {"name": {"title": "Name", "type": "string", "maxLength": 255, "minLength": 1}, "email": {"title": "Email", "type": "string", "format": "email", "maxLength": 254, "minLength": 1}, "account_type": {"title": "Account type", "type": "string", "enum": ["general", "staff"]}, "organization": {"title": "Organization", "type": "string", "format": "uuid", "x-nullable": true}}}, "Login": {"required": ["email", "password"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email", "minLength": 1}, "password": {"title": "Password", "type": "string", "minLength": 1}}}, "CustomPasswordChange": {"required": ["new_password1", "new_password2"], "type": "object", "properties": {"new_password1": {"title": "New password1", "type": "string", "maxLength": 128, "minLength": 1}, "new_password2": {"title": "New password2", "type": "string", "maxLength": 128, "minLength": 1}}}, "PasswordReset": {"required": ["email"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email", "minLength": 1}}}, "CustomPasswordResetConfirm": {"required": ["new_password1", "new_password2", "uid", "token"], "type": "object", "properties": {"new_password1": {"title": "New password1", "type": "string", "maxLength": 128, "minLength": 1}, "new_password2": {"title": "New password2", "type": "string", "maxLength": 128, "minLength": 1}, "uid": {"title": "Uid", "type": "string", "minLength": 1}, "token": {"title": "Token", "type": "string", "minLength": 1}}}, "UserRegister": {"required": ["email", "password1", "password2", "name"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email", "minLength": 1}, "password1": {"title": "Password1", "type": "string", "minLength": 1}, "password2": {"title": "Password2", "type": "string", "minLength": 1}, "name": {"title": "Name", "type": "string", "maxLength": 255, "minLength": 1}, "account_type": {"title": "Account type", "type": "string", "enum": ["general", "staff"], "default": "general"}}}, "UserToken": {"required": ["key", "user"], "type": "object", "properties": {"key": {"title": "Key", "type": "string", "maxLength": 40, "minLength": 1}, "user": {"$ref": "#/definitions/User"}}}, "Maximus_Organization": {"required": ["org_name", "org_domain"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid", "readOnly": true}, "org_name": {"title": "Org name", "type": "string", "maxLength": 255, "minLength": 1}, "org_domain": {"title": "Org domain", "type": "string", "maxLength": 255, "minLength": 1}, "allowed_domains": {"title": "Allowed domains", "type": "string", "maxLength": 255, "x-nullable": true}, "hash_key": {"title": "Hash key", "type": "string", "maxLength": 255, "minLength": 1}, "org_admin_user_id": {"title": "Org admin user id", "type": "string", "format": "uuid", "x-nullable": true}}}, "Maximus_Project": {"required": ["project_name", "assigned_team"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid", "readOnly": true}, "project_name": {"title": "Project name", "type": "string", "maxLength": 255, "minLength": 1}, "project_type": {"title": "Project type", "type": "integer"}, "assigned_team": {"title": "Assigned team", "type": "string", "format": "uuid"}, "organization": {"title": "Organization", "type": "string", "format": "uuid", "x-nullable": true}}}, "MaximusTeam": {"required": ["team_name"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid", "readOnly": true}, "team_name": {"title": "Team name", "type": "string", "maxLength": 255, "minLength": 1}, "is_org_default": {"title": "Is org default", "type": "boolean"}, "organization": {"title": "Organization", "type": "string", "format": "uuid", "x-nullable": true}, "users": {"type": "array", "items": {"type": "string", "format": "uuid"}, "readOnly": true, "uniqueItems": true}}}}}